# infinite potential barrier with <p> >> V_barrier, the wave pass the barrier and is progressively reduced

p1 = SimpleNamespace(
    x0=2.0,       # initial position of the wavepacket
    p=5.0,        # initial momentum of the wavepacket
    sigma=1.0,    # sigma of the wavepacket
    hbar=1.0,     # Planck's constant (scaled)
    m=1.0,        # mass of particles
    dx=0.01,      # spatial step size
    dt=0.01,      # time step size
    x_max=30.0,   # spatial domain limit
    t_max=5.5,    # time domain limit
    potential=3,  # potential to use
    omega=1.0,    # angular frequency of the harmonic oscillator
    Vx_bar=5.0,   # barrier location
    V_barrier=2.0,  # infinite long barrier potential
    Vx_finite_bar=6.2  # finite barrier end
)

cfg = SimpleNamespace(
    superposition=False,  # use wavepackets or eigenfunctions
    eigenfunctions_list=np.array([1, 2]),  # superposition list
    compute_prob=False, # compute probability at each step
    plot_prob=True,     # plot probability or wavefunction
    plot_phase=True,    # plot real an imaginary or phase
    increase_precision=True,  # use Runge-Kutta or Euler
    rk_method='DOP853'  # RK method 'RK23', 'RK45', or 'DOP853'
)
